scenarios:
  my-req:
    requests:
    - url: http://tomato.vprofile.tomatokillerucd.com
      extract-regexp:
        page_title:
          regexp: <title>(\w+)</title>  # regular expression
          default: NOT_FOUND  # default value to use when regexp not found
          match-no: 1  # if multiple values has matched, which match use (0=random)
          template: 1  # which capture group to take, integer or template string
          subject: body  #  subject for search
          scope: all  # check main and sub-samples
      extract-jsonpath:
        varname:
          jsonpath: $.jsonpath[0]  # jsonpath expression
          default: NOT_FOUND  # default value to use when jsonpath not found
          from-variable: JM_VAR # JMeter variable for search
          concat: false   # \
          scope: variable # - see below
          match-no: 4     # /
    - url: http://tomato.vprofile.tomatokillerucd.com/api/studentSubjects/queryByStudentId/2
      extract-css-jquery:
        extractor2:
          expression: input[name=JMeter]
          attribute: value
          match-no: 1
          default: NOT_FOUND
          scope: children   # check sub-samples
    - url: http://tomato.vprofile.tomatokillerucd.com/api/studentUser/2
      extract-xpath:
        destination:
          xpath: /user
          default: NOT_FOUND
          validate-xml: false
          ignore-whitespace: true
          match-no: -1
          use-namespaces: false
          use-tolerant-parser: false
    - url: http://tomato.vprofile.tomatokillerucd.com/api/studentUser/register
      extract-boundary:
        pagetitle:
          subject: body  # extractor scope. values are: body, body-unescaped, body-as-document, response-headers, request-headers, url, code, message
          left: <title>  # left boundary to look for
          right: </title>  # right boundary to look for
          match-no: 1  # match number. 0 for random
          default: DEFVAL  # default value, if nothing is matched
