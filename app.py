# Import the necessary libraries for the Flask API and JSON handling
from flask import Flask, request, jsonify

# Import the custom classes for handling OpenAI's API and utility functions
from OpenAI_GPT_Tutor import OpenAI_GPT_Tutor
from OpenAI_Utilities import OpenAI_Utilities

# Define the encryption key, encrypted configuration file path, and model name for initializing OpenAI
key = b'PoLE4TnSm2Ys9QBeiNDJGuTkrl5NWap_He29jGQB3J8='
encrypted_file_path = 'encrypted_config.ini'
MODEL = "gpt-3.5-turbo"

# Initialize the OpenAI configuration with the given key, encrypted file path, and model
OpenAI_Utilities.initialize_openai(key, encrypted_file_path, MODEL)

# Initialize the Flask application
app = Flask(__name__)


# Define a function to assess the learning style of a student based on their scores
def assess_learning_style(learning_activist, learning_reflector, learning_theorist, learning_pragmatist):
    """
    Assess the learning style based on the provided scores.

    :param learning_activist: Score for the Activist learning style.
    :param learning_reflector: Score for the Reflector learning style.
    :param learning_theorist: Score for the Theorist learning style.
    :param learning_pragmatist: Score for the Pragmatist learning style.
    :return: A string representing the learning style evaluation.
    """
    # Convert the learning style scores to integers
    learning_activist = int(learning_activist)
    learning_reflector = int(learning_reflector)
    learning_theorist = int(learning_theorist)
    learning_pragmatist = int(learning_pragmatist)

    # Determine the predominant learning style based on the scores
    learning_style = "Mixed"
    max_score = max(learning_activist, learning_reflector, learning_theorist, learning_pragmatist)
    if max_score == learning_activist:
        learning_style = "Activist"
    elif max_score == learning_reflector:
        learning_style = "Reflector"
    elif max_score == learning_theorist:
        learning_style = "Theorist"
    elif max_score == learning_pragmatist:
        learning_style = "Pragmatist"

    # Provide an evaluation based on the identified learning style
    evaluation = f"The learning style seems to be predominantly {learning_style}."
    if learning_style == "Activist":
        evaluation += " The student learns best by doing and enjoys new experiences and challenges."
    elif learning_style == "Reflector":
        evaluation += " The student prefers to think about and analyze information before taking action."
    elif learning_style == "Theorist":
        evaluation += " The student enjoys understanding theories and underlying concepts."
    elif learning_style == "Pragmatist":
        evaluation += " The student is keen on trying out ideas and techniques to see if they work in practice."

    return evaluation


# Define a function to validate the parameters and check for missing values
def validate_params(params):
    """
    Validate the parameters to check for missing values.

    :param params: A dictionary containing the parameters to be validated.
    :return: A tuple containing a boolean indicating the validation result and an error message if validation failed.
    """
    # Check for missing or None parameters
    missing_params = [key for key, value in params.items() if value is None]
    if missing_params:
        error_message = f"Missing required parameters: {', '.join(missing_params)}"
        return False, error_message
    return True, None



# Define a Flask route for processing feedback requests
@app.route('/gpt/feedback', methods=['POST'])
def process_feedback_request_with_validation():
    """
        Process the feedback request and return the feedback generated by the OpenAI model.

        :return: A JSON object containing the feedback or an error message.
        """
    # Retrieve the parameters from the URL
    username = request.json.get('username')
    user_prefer_language = request.json.get('user_prefer_language')
    subject = request.json.get('subject_name')
    test_score = request.json.get('test_score')
    unit_description = request.json.get('unit_description')
    all_question_description = request.json.get('all_question_description')
    all_question_option_description = request.json.get('all_question_option_description')
    wrong_answer_number = request.json.get('wrong_answer_number')

    learning_activist = request.json.get('activist')
    learning_reflector = request.json.get('reflector')
    learning_theorist = request.json.get('theorist')
    learning_pragmatist = request.json.get('pragmatist')

    evaluation = assess_learning_style(learning_activist,learning_reflector,learning_theorist,learning_pragmatist)

    # Validate the required parameters
    is_valid, error_message = validate_params({
        'username': username,
        'user_prefer_language': user_prefer_language,
        'subject': subject,
        'test_score': test_score,
        'unit_description': unit_description,
        'all_question_description': all_question_description,
        'all_question_option_description': all_question_option_description,
        'wrong_answer_number': wrong_answer_number,
        'evaluation': evaluation,
    })
    if not is_valid:
        return jsonify({"error": error_message}), 400  # Return 400 Bad Request if validation fails

    # Create an instance of the OpenAI_GPT_Tutor class
    tutor = OpenAI_GPT_Tutor(MODEL)

    # Generate a reply
    reply = tutor.feedback_reply_generate(username, user_prefer_language, all_question_description, all_question_option_description, wrong_answer_number, subject, test_score, unit_description, evaluation)

    return reply  # Return the reply as the response


# Define a Flask route for processing question requests
@app.route('/gpt/question', methods=['POST'])
def process_question_request_with_validation():
    # Retrieve the parameters from the URL
    username = request.json.get('username')
    user_prefer_language = request.json.get('user_prefer_language')
    subject = request.json.get('subject')
    unit = request.json.get('unit')
    unit_description = request.json.get('unit_description')
    question = request.json.get('question')
    question_description = request.json.get('question_description')
    option_description = request.json.get('option_description')
    student_question = request.json.get('student_question')

    learning_activist = request.json.get('activist')
    learning_reflector = request.json.get('reflector')
    learning_theorist = request.json.get('theorist')
    learning_pragmatist = request.json.get('pragmatist')

    evaluation = assess_learning_style(learning_activist,learning_reflector,learning_theorist,learning_pragmatist)

    # Validate the required parameters
    is_valid, error_message = validate_params({
        'username': username,
        'user_prefer_language': user_prefer_language,
        'subject': subject,
        'unit': unit,
        'unit_description': unit_description,
        'question': question,
        'question_description': question_description,
        'option_description': option_description,
        'student_question': student_question,
        'evaluation': evaluation,
    })
    if not is_valid:
        return jsonify({"error": error_message}), 400  # Return 400 Bad Request if validation fails

    # Create an instance of the OpenAI_GPT_Tutor class
    tutor = OpenAI_GPT_Tutor(MODEL)

    # Generate a reply
    reply = tutor.answer_reply_generate(username, user_prefer_language,subject, unit, unit_description, question, question_description, option_description,student_question, evaluation)

    return reply  # Return the reply as the response


# Define a Flask route for processing essay requests
@app.route('/gpt/writting', methods=['POST'])
def process_writing_request_with_validation():
    # Retrieve the parameters from the URL

    username = request.json.get('username')
    user_prefer_language = request.json.get('user_prefer_language')
    essay_topic = request.json.get('essay_topic')
    essay_content = request.json.get('essay_content')
    essay_language = request.json.get('essay_subject')


    learning_activist = request.json.get('activist')
    learning_reflector = request.json.get('reflector')
    learning_theorist = request.json.get('theorist')
    learning_pragmatist = request.json.get('pragmatist')

    evaluation = assess_learning_style(learning_activist,learning_reflector,learning_theorist,learning_pragmatist)

    # Validate the required parameters
    is_valid, error_message = validate_params({
        'username': username,
        'user_prefer_language': user_prefer_language,
        'essay_topic': essay_topic,
        'essay_content': essay_content,
        'essay_language': essay_language,
        'evaluation': evaluation,
    })
    if not is_valid:
        return jsonify({"error": error_message}), 400  # Return 400 Bad Request if validation fails

    # Create an instance of the OpenAI_GPT_Tutor class
    tutor = OpenAI_GPT_Tutor(MODEL)

    # Generate a reply
    reply = tutor.writing_reply_generate(username, user_prefer_language, essay_topic, essay_content, essay_language, evaluation)

    return reply  # Return the reply as the response
