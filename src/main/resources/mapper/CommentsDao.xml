<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.CommentsDao">

    <resultMap type="com.example.demo.entity.Comments" id="CommentsMap">
        <result property="commentId" column="comment_id" jdbcType="INTEGER"/>
        <result property="studentId" column="student_id" jdbcType="INTEGER"/>
        <result property="questionId" column="question_id" jdbcType="INTEGER"/>
        <result property="comment" column="comment" jdbcType="VARCHAR"/>
        <result property="time" column="time" jdbcType="TIMESTAMP"/>
        <result property="likes" column="likes" jdbcType="INTEGER"/>
    </resultMap>

    <!--query By id -->
    <select id="queryById" resultMap="CommentsMap">
        select
          comment_id, student_id, question_id, comment, time, likes
        from comments
        where comment_id = #{commentId}
    </select>

    <!--query all-->
    <select id="queryAllByLimit" resultMap="CommentsMap">
        select
          comment_id, student_id, question_id, comment, time, likes
        from comments
        <where>
            <if test="comments.commentId != null">
                and comment_id = #{comments.commentId}
            </if>
            <if test="comments.studentId != null">
                and student_id = #{comments.studentId}
            </if>
            <if test="comments.questionId != null">
                and question_id = #{comments.questionId}
            </if>
            <if test="comments.comment != null and comment != ''">
                and comment = #{comment}
            </if>
            <if test="comments.time != null">
                and time = #{time}
            </if>
            <if test="comments.likes != null">
                and likes = #{likes}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--count-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from comments
        <where>
            <if test="commentId != null">
                and comment_id = #{commentId}
            </if>
            <if test="studentId != null">
                and student_id = #{studentId}
            </if>
            <if test="questionId != null">
                and question_id = #{questionId}
            </if>
            <if test="comment != null and comment != ''">
                and comment = #{comment}
            </if>
            <if test="time != null">
                and time = #{time}
            </if>
            <if test="likes != null">
                and likes = #{likes}
            </if>
        </where>
    </select>

    <!--add-->
    <insert id="insert" keyProperty="commentId" useGeneratedKeys="true">
        insert into comments(student_id, question_id, comment, time, likes)
        values (#{studentId}, #{questionId}, #{comment}, #{time}, #{likes})
    </insert>

    <insert id="insertBatch" keyProperty="commentId" useGeneratedKeys="true">
        insert into comments(student_id, question_id, comment, time, likes)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.studentId}, #{entity.questionId}, #{entity.comment}, #{entity.time}, #{entity.likes})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="commentId" useGeneratedKeys="true">
        insert into comments(student_id, question_id, comment, time, likes)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.studentId}, #{entity.questionId}, #{entity.comment}, #{entity.time}, #{entity.likes})
        </foreach>
        on duplicate key update
        student_id = values(student_id),
        question_id = values(question_id),
        comment = values(comment),
        time = values(time),
        likes = values(likes)
    </insert>

    <!--update-->
    <update id="update">
        update comments
        <set>
            <if test="studentId != null">
                student_id = #{studentId},
            </if>
            <if test="questionId != null">
                question_id = #{questionId},
            </if>
            <if test="comment != null and comment != ''">
                comment = #{comment},
            </if>
            <if test="time != null">
                time = #{time},
            </if>
            <if test="likes != null">
                likes = #{likes},
            </if>
        </set>
        where comment_id = #{commentId}
    </update>

    <!--delete-->
    <delete id="deleteById">
        delete from comments where comment_id = #{commentId}
    </delete>

</mapper>

